---------------------------------------------------------------------------------------------------------------------------------------------------------------
Repository Clone/Setup & Branch Management: Steps 1 to 4

1. Clone the Repository by doing:
git clone -b [shared-branch-name] [repository-URL]
(e.g., git clone -b development-branch https://github.com/example/repo.git)

2. Enter the Folder by doing:
cd [repository-directory]
(e.g., cd Main)

3. Check Which Git Branch You’re In by doing:
git branch

4. If you need to create a new branch, do:
git checkout -b [new-branch-name]
(e.g., git checkout -b feature-username)

If there's one you already have, then do:
git checkout [existing-branch-name]
(e.g., git checkout feature-username)

If you want to delete a branch, do:
git branch -d [branch-name] (safe delete if merged)
git branch -D [branch-name] (force delete if not merged)


---------------------------------------------------------------------------------------------------------------------------------------------------------------
Keeping Your App/Branch Updated: Steps 1 to 7

1. Navigate to the Main Folder by doing:
cd [repository-directory]
(e.g., cd Main)
Note: This ensures you are in the repository’s root directory where Git commands work properly.

2. Stash Your Local Changes by doing (REMEMBER to be in your feature-username branch):
git stash
Note: This temporarily saves your local changes so you can pull the latest updates without any conflicts.

3. Switch to the Shared Branch by doing:
git checkout [shared-branch-name]
(e.g., git checkout development-branch)
Note: Switch to the branch that contains the latest updates you want to pull.

4. Pull the Latest Changes from the shared branch by doing:
git pull origin [shared-branch-name]
(e.g., git pull origin development-branch)
Note: This updates your local copy of the branch with the latest code from the remote repository.

5. Switch Back to Your Personal Branch by doing:
git checkout [your-branch-name]
(e.g., git checkout feature-username)
Note: Return to your own branch where you will apply the updates.

6. Merge the Updates from the Shared Branch into your personal branch by doing:
git merge [shared-branch-name]
(e.g., git merge development-branch)
Note: This incorporates the latest updates from the shared branch into your personal branch.

7. Apply Your Stashed Changes by doing:
git stash apply
Note: This restores your previously saved changes back into your working directory.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Pushing Your Updates: Steps 1 to 5

1. Navigate to the Main Folder by doing:
cd [repository-directory]
(e.g., cd Main)
Note: Make sure you are in the repository’s root directory where Git commands work.

2. Check You’re on Your Personal Branch by doing:
git branch
Note: This shows the current branch you’re on. Make sure it displays your personal branch (e.g., feature-username).

3. Stage Your Changes by doing:
git add .
Note: This stages all modified files in the repository, preparing them for commit.

4. Commit Your Changes with a message by doing:
git commit -m "Describe your changes"
Note: Use a descriptive message (e.g., "Fixed login bug"). This saves your changes locally.

5. Push Your Personal Branch to the remote repository by doing:
git push origin [your-branch-name]
(e.g., git push origin feature-username)
Note: This uploads your changes to the remote repository so others can access your work.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
When to Check Status

After Making Changes to Files:
Command: git status
Reason: To see which files have been modified, added, or deleted. It shows the files that are not yet staged for commit.

After Staging Files (git add .):
Command: git status
Reason: To confirm that the files are correctly staged before committing. This ensures that only the intended changes will be included in the next commit.

After Committing Changes:
Command: git status
Reason: To verify that there are no remaining uncommitted changes. This helps confirm that your working directory is clean and ready for the next task.

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Other Essential Git Commands

Checking the Log of Commits
Command: git log
Use: Shows the history of commits on the current branch. It’s useful to review past changes and see commit messages, authors, and timestamps.